{"version":3,"sources":["features/metronome/Inputs/Inputs.module.css","features/metronome/StatusWindow/StatusWindow.module.css","features/metronome/CountDisplay/CountDisplay.module.css","features/metronome/Inputs/ModalButton/ModalButton.module.css","features/metronome/BpmInput/BpmInput.module.css","components/Header/Header.module.css","App.module.css","components/Header/Header.tsx","features/metronome/metronomeSlice.ts","features/metronome/CountDisplay/CountDisplay.tsx","features/metronome/Inputs/audio/bigSound.mp3","features/metronome/Inputs/audio/smallSound.mp3","features/metronome/Inputs/ModalButton/ModalButton.tsx","features/metronome/Inputs/Inputs.tsx","features/metronome/BpmInput/BpmInput.tsx","features/metronome/StatusWindow/StatusWindow.tsx","App.tsx","features/counter/counterAPI.ts","features/counter/counterSlice.ts","app/store.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","Header","className","styles","root","metronomeSlice","createSlice","name","initialState","count","bpm","musicNote","beatCountNumerator","beatCountDenominator","soundCount","isPlay","isModalOpen","inputsModal","index","buttonsData","reducers","setCount","state","action","payload","setBpm","setBeatCount","Numerator","Denominator","setMusicNote","setSoundCount","togglePlay","modalOpen","setInputsButtonsData","actions","selectCount","metronome","selectBpm","selectMusicNote","selectBeatCountNumerator","selectBeatCountDenominator","selectIsModalOpen","selectInputsButtonsData","selectIsPlay","selectSoundCount","CountDisplay","useSelector","Array","map","iconWrapper","fontSize","lensIcon","hide","panoramaFishEyeIcon","ModalButton","props","dispatch","useDispatch","selectedModal","buttonIndex","dispatchModalClose","dispatchSetMusicNote","newData","Number","buttonData","resetCount","resetSoundCount","dispatchSetBeatCount","splitData","split","button","defaultValue","onClick","buttonText","modalIndex","SettingButtons","oneCount","bigSound","Audio","bigSoundFile","preload","load","smallSound","smallSoundFile","dispatchModalOpen","dispatchTogglePlay","dispatchSetInputsButtonsData","newModalIndex","i","push","toString","dispatchSetSoundCount","newCount","modalOpenButtonClicked","targetModal","soundPlayer","pointIcons","document","querySelectorAll","play","currentTime","classList","remove","length","add","useEffect","soundInterval","setInterval","Math","floor","clearInterval","id","barButtonText","Modal","open","onClose","aria-labelledby","aria-describedby","modal","modalWindow","setStateForm","value","BpmInput","useForm","register","handleSubmit","dispatchBpmData","data","onSubmit","bpmInputLabel","type","bpmInput","onBlur","StatusWindow","beatContNumerator","stateWrapper","App","Inputs","fetchCount","amount","Promise","resolve","setTimeout","createAsyncThunk","a","response","counterSlice","status","increment","decrement","incrementByAmount","store","configureStore","reducer","counter","counterReducer","metronomeReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.124c0278.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Inputs_root__3w1C3\",\"button\":\"Inputs_button__1Mhxr\",\"barButtonText\":\"Inputs_barButtonText__3Q_M2\",\"modal\":\"Inputs_modal__3EVSV\",\"modalWindow\":\"Inputs_modalWindow__WKajK\",\"setStateForm\":\"Inputs_setStateForm__ieiKV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"StatusWindow_root__1TbUV\",\"stateWrapper\":\"StatusWindow_stateWrapper__bzLUU\",\"state\":\"StatusWindow_state__1hExZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"CountDisplay_root__35akm\",\"iconWrapper\":\"CountDisplay_iconWrapper__3ZXxM\",\"lensIcon\":\"CountDisplay_lensIcon__3wFCX\",\"panoramaFishEyeIcon\":\"CountDisplay_panoramaFishEyeIcon__2C0_4\",\"hide\":\"CountDisplay_hide__PIl97\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"ModalButton_root__3J2Sl\",\"button\":\"ModalButton_button__3p6ET\",\"buttonText\":\"ModalButton_buttonText__ccFmA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"BpmInput_root__3LCYi\",\"bpmInputLabel\":\"BpmInput_bpmInputLabel__Ili_2\",\"bpmInput\":\"BpmInput_bpmInput__1u792\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Header_root__20deQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"App_root__1vUZu\"};","import React from 'react'\r\nimport styles from './Header.module.css'\r\n\r\nconst Header:React.FC = () => {\r\n  return (\r\n    <div className={styles.root}>\r\n      <h1>メトロノーム</h1>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../app/store';\r\n\r\n// stateType\r\nexport interface metronomeState {\r\n    count:                number;      //メトロノーム再生後の経過秒数\r\n    bpm:                  number;      // 指定中のbpm。\r\n    musicNote:            number;      // 指定中の音符。1小節に対する割合で指定。四分音符は1/4、八分音符は1/8等。\r\n    beatCountNumerator:   number,      // 現在の拍子の分子\r\n    beatCountDenominator: number,      // 現在の拍子の分母\r\n    soundCount:           number,\r\n    isPlay:               boolean;     // trueでメトロノーム再生中\r\n    isModalOpen:          boolean;     // trueでモーダルがオープン,falseでクローズ\r\n\r\n    inputsModal:          {            //モーダルの表示に必要なデータ\r\n    index:                string;      //何のモーダルを表示しているか\r\n    buttonsData:          string[];    //map関数でモーダルウィンドウ内のボタンをレンダーするための配列。ループ回数分1,2,3...と数値が入る。\r\n    };\r\n}\r\n\r\n// state初期値\r\nconst initialState: metronomeState = {\r\n  count:                0,\r\n  bpm:                  120,\r\n  musicNote:            4,     // 1連符\r\n  beatCountNumerator:   4,     // 4/〇拍子\r\n  beatCountDenominator: 4,     // 〇/4拍子\r\n  soundCount:           1,     // 音が鳴るたびに＋\r\n  isPlay:               false,\r\n  isModalOpen:          false,\r\n  inputsModal:          {\r\n  index:                '',\r\n  buttonsData:          []\r\n  },\r\n};\r\n\r\nexport const metronomeSlice = createSlice({\r\n  name: 'metronome',\r\n  initialState,\r\n  reducers: {\r\n    setCount: (state, action:PayloadAction<number>) => {\r\n      state.count = action.payload;\r\n    },\r\n    setBpm: (state, action:PayloadAction<number>) => {\r\n      state.bpm = action.payload;\r\n    },\r\n    setBeatCount: (state, action:PayloadAction<{Numerator:number; Denominator:number;}>) => {\r\n      state.beatCountNumerator   = action.payload.Numerator;\r\n      state.beatCountDenominator = action.payload.Denominator;\r\n    },\r\n    setMusicNote: (state, action:PayloadAction<number>) => {\r\n      state.musicNote = action.payload;\r\n    },\r\n    setSoundCount: (state, action:PayloadAction<number>) => {\r\n      state.soundCount = action.payload;\r\n    },\r\n    togglePlay: (state) => {\r\n      state.isPlay = !state.isPlay;\r\n    },\r\n    modalOpen: (state, action:PayloadAction<boolean>) => {\r\n      state.isModalOpen = action.payload;\r\n    },\r\n    setInputsButtonsData: (state, action:PayloadAction<metronomeState[\"inputsModal\"]>) => {\r\n      state.inputsModal = action.payload;\r\n    }\r\n  },\r\n});\r\n\r\n// reducersをエクスポート\r\nexport const { setCount,setBpm,setBeatCount,togglePlay,setMusicNote,modalOpen,setInputsButtonsData,setSoundCount } = metronomeSlice.actions;\r\n\r\n// stateをエクスポート\r\nexport const selectCount                = (state: RootState) => state.metronome.count;\r\nexport const selectBpm                  = (state: RootState) => state.metronome.bpm;\r\nexport const selectMusicNote            = (state: RootState) => state.metronome.musicNote;\r\nexport const selectBeatCountNumerator   = (state: RootState) => state.metronome.beatCountNumerator;\r\nexport const selectBeatCountDenominator = (state: RootState) => state.metronome.beatCountDenominator;\r\nexport const selectIsModalOpen          = (state: RootState) => state.metronome.isModalOpen;\r\nexport const selectInputsButtonsData    = (state: RootState) => state.metronome.inputsModal;\r\nexport const selectIsPlay               = (state: RootState) => state.metronome.isPlay;\r\nexport const selectSoundCount           = (state: RootState) => state.metronome.soundCount;\r\n\r\nexport default metronomeSlice.reducer;\r\n","import React from 'react'\r\nimport styles from './CountDisplay.module.css'\r\nimport LensIcon from '@material-ui/icons/Lens';\r\nimport PanoramaFishEyeIcon from '@material-ui/icons/PanoramaFishEye';\r\n\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { selectBeatCountNumerator } from '../metronomeSlice';\r\n\r\nconst CountDisplay:React.FC = () => {\r\n  const beatCountNumerator = useSelector(selectBeatCountNumerator)\r\n\r\n  return (\r\n    <div className={styles.root}>\r\n      {\r\n       [...Array(beatCountNumerator)].map((index) => {\r\n          return (\r\n            <div className={styles.iconWrapper} key={index}>\r\n              <LensIcon fontSize={\"large\"} className={`${styles.lensIcon} ${styles.hide}`} />\r\n              <PanoramaFishEyeIcon fontSize={\"large\"} className={styles.panoramaFishEyeIcon} />\r\n            </div>\r\n            )\r\n        })\r\n      }\r\n      {/* <PanoramaFishEyeIcon fontSize={\"large\"}/>\r\n      <PanoramaFishEyeIcon fontSize={\"large\"}/>\r\n      <PanoramaFishEyeIcon fontSize={\"large\"}/> */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CountDisplay","export default __webpack_public_path__ + \"static/media/bigSound.9a602878.mp3\";","export default __webpack_public_path__ + \"static/media/smallSound.3797798e.mp3\";","import React from 'react'\r\nimport { modalOpen,setMusicNote,setBeatCount,setCount,setSoundCount } from '../../metronomeSlice'\r\nimport { useDispatch } from 'react-redux'\r\n\r\nimport styles from './ModalButton.module.css'\r\n\r\n\r\ntype propsType = {\r\n  buttonData:  string;\r\n  buttonIndex: string\r\n}\r\n\r\nconst ModalButton:React.FC<propsType> = (props) => {\r\n  const dispatch = useDispatch()\r\n  // const {register} = useForm();\r\n  const selectedModal = props.buttonIndex;\r\n\r\n  const reducers = {\r\n    // モーダルを閉じる\r\n    dispatchModalClose: () => {\r\n      dispatch(modalOpen(false))\r\n    },\r\n    // props.buttonDataをstoreに保存\r\n    // 音符選択モーダルの場合\r\n    dispatchSetMusicNote: () => {\r\n      const newData = Number(props.buttonData)\r\n      dispatch(setMusicNote(newData))\r\n      reducers.resetCount(); //再生中にデータを更新した場合に備えてメトロノームのカウントをリセット\r\n      reducers.resetSoundCount();\r\n      reducers.dispatchModalClose();\r\n    },\r\n    // 拍子選択モーダルの場合\r\n    dispatchSetBeatCount: () => {\r\n      // BeatCountの値になるオブジェクトを生成\r\n      const splitData = props.buttonData.split('/') //buttonDataは「分子/分母」の文字列で受け取っている\r\n      const newData = {\r\n        Numerator: Number(splitData[0]),\r\n        Denominator: Number(splitData[1]),\r\n      }\r\n      dispatch(setBeatCount(newData));\r\n      reducers.resetCount(); //再生中にデータを更新した場合に備えてメトロノームのカウントをリセット\r\n      reducers.resetSoundCount();\r\n      reducers.dispatchModalClose();\r\n    },\r\n    resetCount: () => {\r\n      dispatch(setCount(0));\r\n    },\r\n    resetSoundCount: () => {\r\n      dispatch(setSoundCount(0));\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={styles.root}>\r\n      {\r\n        selectedModal === \"musicNote\" ?\r\n          <button className={styles.button} defaultValue={props.buttonData} onClick={reducers.dispatchSetMusicNote}>\r\n            <p className={styles.buttonText}> {props.buttonData}連符 </p> \r\n          </ button> :\r\n          \r\n        selectedModal === \"beat\" &&\r\n          <button className={styles.button} defaultValue={props.buttonData} onClick={reducers.dispatchSetBeatCount}>\r\n            <p className={styles.buttonText}> {props.buttonData} </p>\r\n          </button>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ModalButton\r\n","import React,{useEffect} from 'react'\r\nimport { useDispatch,useSelector } from 'react-redux';\r\n\r\nimport bigSoundFile from './audio/bigSound.mp3'\r\nimport smallSoundFile from './audio/smallSound.mp3'\r\n\r\nimport { \r\n  modalOpen,selectMusicNote,selectIsModalOpen,selectInputsButtonsData,selectIsPlay,selectBeatCountNumerator,selectBpm,selectCount,selectSoundCount,\r\n  setCount,setInputsButtonsData,togglePlay,setSoundCount,\r\n} from '../metronomeSlice'\r\n\r\nimport MusicNoteIcon from '@material-ui/icons/MusicNote';\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport StopIcon from '@material-ui/icons/Stop';\r\nimport Modal from '@material-ui/core/Modal';\r\n\r\nimport styles from './Inputs.module.css'\r\nimport ModalButton from './ModalButton/ModalButton';\r\n\r\nconst modalIndex = {\r\n  musicNote: \"musicNote\",\r\n  beat:      \"beat\"\r\n}\r\n\r\nconst SettingButtons:React.FC = () => {\r\n  const dispatch           = useDispatch();\r\n  const isModalOpen        = useSelector(selectIsModalOpen);\r\n  const isPlay             = useSelector(selectIsPlay);\r\n  const inputsModal        = useSelector(selectInputsButtonsData);\r\n  const count              = useSelector(selectCount);\r\n  const bpm                = useSelector(selectBpm);\r\n  const beatCountNumerator = useSelector(selectBeatCountNumerator);\r\n  const musicNote          = useSelector(selectMusicNote);\r\n  const soundCount         = useSelector(selectSoundCount);\r\n\r\n  const sixtySecond = 60;\r\n  const oneCount = sixtySecond / bpm * 1000; //ミリ秒に変換\r\n\r\n  const bigSound = new Audio(bigSoundFile);\r\n  bigSound.preload = \"auto\";\r\n  bigSound.load();\r\n\r\n  const smallSound = new Audio(smallSoundFile);\r\n  smallSound.preload = \"auto\";\r\n  bigSound.load();\r\n\r\n  // sliceから受け取ったreducerをオブジェクトにまとめる\r\n  const reducers = {\r\n    // モーダルを開く\r\n    dispatchModalOpen: () => {\r\n      dispatch(modalOpen(true))\r\n    },\r\n    // モーダルを閉じる\r\n    dispatchModalClose: () => {\r\n      dispatch(modalOpen(false))\r\n    },\r\n    // 再生・停止を切り替え\r\n    dispatchTogglePlay: () => {\r\n      dispatch(togglePlay())\r\n    },\r\n    // モーダルウィンドウ内のボタンに表示するテキスト及び表示数を設定\r\n    dispatchSetInputsButtonsData: (newModalIndex: string) => {\r\n      let newData:string[] = [] // ボタンに表示するテキスト\r\n      \r\n      // 音符設定用モーダルを表示する場合\r\n      if(newModalIndex === modalIndex.musicNote){ \r\n        for(let i = 1; i <= 16; i++){ // htmlに挿入する際は「1 + '連符'」等となる\r\n          newData.push(i.toString())\r\n        }\r\n      \r\n      // 拍子設定用モーダルを表示する場合\r\n      }else if(newModalIndex === modalIndex.beat){ // テキストに挿入する際は「1/4」等となる\r\n        newData = [\r\n          '1/4',\r\n          '2/4',\r\n          '3/4',\r\n          '4/4'\r\n        ]\r\n      }\r\n\r\n      // 新しくstateに保存するデータ\r\n      const newInputsButtonsData = {\r\n        index:        newModalIndex,\r\n        buttonsData:  newData\r\n      }\r\n\r\n      dispatch(setInputsButtonsData(newInputsButtonsData))\r\n    },\r\n    // \r\n    dispatchSetSoundCount: (newCount: number) => {\r\n      dispatch(setSoundCount(newCount));\r\n    }\r\n  }\r\n  \r\n  // クリックしたボタンに応じて、モーダルの表示を切り替え\r\n  const modalOpenButtonClicked = (targetModal:string) => {\r\n    // reducers.dispatchSelectModal(targetModal); // 現在表示中のモーダルを指定\r\n    reducers.dispatchSetInputsButtonsData(targetModal); // ボタン内のテキスト及び表示数を指定\r\n    reducers.dispatchModalOpen(); // モーダルを開く\r\n  }\r\n\r\n  // ディスプレイ内のiconの切り替え \r\n  const soundPlayer = () => {\r\n    const pointIcons:NodeListOf<HTMLElement> = document.querySelectorAll('.CountDisplay_lensIcon__3wFCX')\r\n    \r\n    if(soundCount === 1){\r\n      bigSound.play();\r\n      bigSound.currentTime = 0;\r\n      \r\n      if(count === 0){\r\n        pointIcons[0].classList.remove('CountDisplay_hide__PIl97')\r\n        // beatCountの更新後のカウントをリセットにする処理で最初のアイコン以外を非表示にしたいのでfor文を使用\r\n        for(let i = 1; i <= pointIcons.length - 1; i++){ //0の要素は除くためにi=1\r\n          pointIcons[i].classList.add('CountDisplay_hide__PIl97')\r\n        }\r\n      } else {\r\n        pointIcons[count].classList.remove('CountDisplay_hide__PIl97')\r\n        pointIcons[count - 1].classList.add('CountDisplay_hide__PIl97') //一つ前のアイコンを戻す\r\n      }\r\n\r\n      if(count >= beatCountNumerator - 1){\r\n        dispatch(setCount(0))\r\n      } else {\r\n        dispatch(setCount(count + 1))\r\n      }\r\n\r\n    } else {\r\n      smallSound.play();\r\n      smallSound.currentTime = 0;\r\n    }\r\n\r\n    if(soundCount === musicNote){\r\n      reducers.dispatchSetSoundCount(1)\r\n    } else {\r\n      reducers.dispatchSetSoundCount(soundCount + 1);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if(isPlay && bpm !== 0){\r\n      const soundInterval = setInterval(soundPlayer,Math.floor( oneCount / musicNote ));\r\n      return () =>  { clearInterval(soundInterval);}\r\n    }\r\n  })\r\n\r\n  return (\r\n    <div className={styles.root}>\r\n      {/* audio */}\r\n      <button id=\"musicNoteButton\" className={styles.button} onClick={() => modalOpenButtonClicked(modalIndex.musicNote)}>\r\n        <MusicNoteIcon fontSize={\"large\"}/>\r\n      </button>\r\n\r\n      <button className={styles.button} onClick={reducers.dispatchTogglePlay}>\r\n        {\r\n          isPlay === true ?\r\n          <StopIcon fontSize={\"large\"}/>\r\n          :\r\n          <PlayArrowIcon fontSize={\"large\"} />\r\n        }\r\n      </button>\r\n\r\n      <button id=\"beatButton\" className={styles.button} onClick={() => modalOpenButtonClicked(modalIndex.beat)}>\r\n        <p className={styles.barButtonText}> 拍子 </p>\r\n      </button>\r\n\r\n      <Modal\r\n        open             = {isModalOpen}\r\n        onClose          = {reducers.dispatchModalClose}\r\n        aria-labelledby  = \"simple-modal-title\"\r\n        aria-describedby = \"simple-modal-description\"\r\n        className        = {styles.modal}\r\n      >\r\n        <div>\r\n          \r\n        <div className={styles.modalWindow}>\r\n          <div className={styles.setStateForm}>\r\n            {\r\n              inputsModal.buttonsData.map((value,index) => {\r\n                return(\r\n                  <ModalButton buttonData={value} buttonIndex={inputsModal.index} key={value} />\r\n                )\r\n              })\r\n            }\r\n          </div>\r\n        </div>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SettingButtons","import React from 'react'\r\nimport { useForm } from 'react-hook-form'\r\n\r\nimport { useDispatch } from 'react-redux'\r\nimport { setBpm,setCount } from '../metronomeSlice'\r\n\r\nimport styles from './BpmInput.module.css'\r\n\r\ntype InputsType = {\r\n  setBpm: number;\r\n}\r\n\r\nconst BpmInput:React.FC = () => {\r\n  const dispatch = useDispatch()\r\n  // const bpm = useSelector(selectBpm)\r\n  const { register,handleSubmit } = useForm()\r\n\r\n  const dispatchBpmData = (data:InputsType) => {\r\n    dispatch(setBpm(data.setBpm))\r\n    dispatch(setCount(0))\r\n  }\r\n\r\n  return (\r\n    <div className={styles.root}>\r\n      <form onSubmit={handleSubmit(dispatchBpmData)}>\r\n        <label className={styles.bpmInputLabel}>\r\n          bpm:\r\n          <input type=\"text\"className={styles.bpmInput} defaultValue=\"120\" {...register(\"setBpm\")} onBlur={handleSubmit(dispatchBpmData)}/>\r\n        </label>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default BpmInput","import React from 'react'\r\nimport styles from './StatusWindow.module.css'\r\n\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport { selectMusicNote,selectBeatCountNumerator,selectBeatCountDenominator,selectIsPlay } from '../metronomeSlice'\r\n\r\nconst StatusWindow:React.FC = () => {\r\n  const musicNote = useSelector(selectMusicNote)\r\n  const beatContNumerator = useSelector(selectBeatCountNumerator)\r\n  const beatCountDenominator = useSelector(selectBeatCountDenominator)\r\n  const isPlay = useSelector( selectIsPlay )\r\n  return (\r\n    <div className={ styles.root }>\r\n      <div className={ styles.stateWrapper }>\r\n        <p className={ styles.state }>{ musicNote }連符</p>\r\n      </div>\r\n\r\n      {/* inputsコンポーネントのボタンと位置を揃えるために指定 */}\r\n      <div className={ styles.stateWrapper }>\r\n        {isPlay ?\r\n        <p className={ styles.state }>再生中</p> :\r\n        <p className={ styles.state }>停止中</p> \r\n        }\r\n      </div>\r\n\r\n      <div id=\"beatButton\" className={ styles.stateWrapper }>\r\n        <p className={ styles.state }>{beatContNumerator}/{beatCountDenominator}拍子</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default StatusWindow","import React from 'react';\n\nimport Header from './components/Header/Header';\nimport CountDisplay from './features/metronome/CountDisplay/CountDisplay';\nimport Inputs from './features/metronome/Inputs/Inputs'\nimport BpmInput from './features/metronome/BpmInput/BpmInput'\nimport StatusWindow from './features/metronome/StatusWindow/StatusWindow'\n\nimport styles from './App.module.css'\n\nconst App:React.FC = () => {\n  return (\n    <div className={styles.root}>\n      <Header />\n      <BpmInput />\n      <CountDisplay />\n      <StatusWindow />\n      <Inputs />\n    </div>\n  );\n}\n\nexport default App;","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise<{ data: number }>((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../app/store';\nimport { fetchCount } from './counterAPI';\n\nexport interface CounterState {\n  value: number;\n  status: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: CounterState = {\n  value: 0,\n  status: 'idle',\n};\n\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount: number) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    increment: (state) => {\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\nexport const selectCount = (state: RootState) => state.counter.value;\n\nexport const incrementIfOdd = (amount: number): AppThunk => (\n  dispatch,\n  getState\n) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\nimport metronomeReducer from '../features/metronome/metronomeSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    metronome: metronomeReducer\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport './destyle.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}